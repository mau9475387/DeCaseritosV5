/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package RedSocial;

import Archivos.Ficheros;
import Cuentas.Comensal;
import java.awt.Color;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Mau
 */
public class comP extends javax.swing.JPanel {

    Color naranjaSuave;
    Color naranja;
    CrearCuentas frame;

    public comP(CrearCuentas x) {
        initComponents();
        naranja = new Color(247, 87, 26);
        naranjaSuave = new Color(250, 183, 44);
        crearbtn.setBackground(naranja);
        crearlabel.setForeground(Color.white);
        cancelarbtn.setBackground(naranja);
        cancelarlabel.setForeground(Color.white);
        frame = x;
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        nombreL = new javax.swing.JLabel();
        usuarioL = new javax.swing.JLabel();
        contraseñaL = new javax.swing.JLabel();
        pass2L = new javax.swing.JLabel();
        mail2L = new javax.swing.JLabel();
        celularL = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        mailL = new javax.swing.JLabel();
        datosP = new javax.swing.JPanel();
        nombreText = new javax.swing.JTextField();
        usuarioText = new javax.swing.JTextField();
        mailText = new javax.swing.JTextField();
        mail2Text = new javax.swing.JTextField();
        celularText = new javax.swing.JTextField();
        passText = new javax.swing.JPasswordField();
        pass2Text = new javax.swing.JPasswordField();
        fotoL = new javax.swing.JLabel();
        fotoperfillbl = new javax.swing.JLabel();
        pathphotolbl = new javax.swing.JLabel();
        Buscarfotobtn = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        crearbtn = new javax.swing.JPanel();
        crearlabel = new javax.swing.JLabel();
        cancelarbtn = new javax.swing.JPanel();
        cancelarlabel = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 0, -1, -1));

        nombreL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        nombreL.setText("Nombre completo:");
        add(nombreL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, 30));

        usuarioL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        usuarioL.setText("Nombre de usuario:");
        add(usuarioL, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, -1, 30));

        contraseñaL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        contraseñaL.setText("Contraseña:");
        add(contraseñaL, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, -1, -1));

        pass2L.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        pass2L.setText("Repita la contraseña:");
        add(pass2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, -1, -1));

        mail2L.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        mail2L.setText("repita su E-mail:");
        add(mail2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, -1, -1));

        celularL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        celularL.setText("Numero de celular:");
        add(celularL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, -1, -1));

        titulo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        titulo.setText("CREAR CUENTA DE TIPO COMENSAL");
        add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        mailL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        mailL.setText("E-mail:");
        add(mailL, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, -1, -1));

        datosP.setOpaque(false);
        datosP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nombreText.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        nombreText.setForeground(new java.awt.Color(204, 204, 204));
        nombreText.setText("Ingrese su nombre completo");
        nombreText.setBorder(null);
        nombreText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                nombreTextMousePressed(evt);
            }
        });
        datosP.add(nombreText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 530, 30));

        usuarioText.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        usuarioText.setForeground(new java.awt.Color(204, 204, 204));
        usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
        usuarioText.setBorder(null);
        usuarioText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                usuarioTextMousePressed(evt);
            }
        });
        datosP.add(usuarioText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 530, 30));

        mailText.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        mailText.setForeground(new java.awt.Color(204, 204, 204));
        mailText.setText("Ingrese su e-mail");
        mailText.setBorder(null);
        mailText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mailTextMousePressed(evt);
            }
        });
        datosP.add(mailText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 530, 30));

        mail2Text.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        mail2Text.setForeground(new java.awt.Color(204, 204, 204));
        mail2Text.setText("Repita su e-mail");
        mail2Text.setBorder(null);
        mail2Text.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mail2TextMousePressed(evt);
            }
        });
        datosP.add(mail2Text, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 530, 30));

        celularText.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        celularText.setForeground(new java.awt.Color(204, 204, 204));
        celularText.setText("Ingrese su número de celular");
        celularText.setBorder(null);
        celularText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                celularTextMousePressed(evt);
            }
        });
        celularText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                celularTextActionPerformed(evt);
            }
        });
        datosP.add(celularText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 530, 30));

        passText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passText.setForeground(new java.awt.Color(204, 204, 204));
        passText.setText("********");
        passText.setBorder(null);
        passText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                passTextMousePressed(evt);
            }
        });
        datosP.add(passText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 530, 30));

        pass2Text.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pass2Text.setForeground(new java.awt.Color(204, 204, 204));
        pass2Text.setText("********");
        pass2Text.setBorder(null);
        pass2Text.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pass2TextMousePressed(evt);
            }
        });
        datosP.add(pass2Text, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 530, 30));

        fotoL.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        fotoL.setText("Foto de perfil:");
        datosP.add(fotoL, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, -1, -1));

        fotoperfillbl.setBackground(new java.awt.Color(255, 153, 51));
        fotoperfillbl.setForeground(new java.awt.Color(255, 153, 51));
        fotoperfillbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        datosP.add(fotoperfillbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 100, 100));
        datosP.add(pathphotolbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 0, 10));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Buscar Foto");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout BuscarfotobtnLayout = new javax.swing.GroupLayout(Buscarfotobtn);
        Buscarfotobtn.setLayout(BuscarfotobtnLayout);
        BuscarfotobtnLayout.setHorizontalGroup(
            BuscarfotobtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        BuscarfotobtnLayout.setVerticalGroup(
            BuscarfotobtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        datosP.add(Buscarfotobtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 110, 30));

        add(datosP, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 540, 486));

        crearbtn.setPreferredSize(new java.awt.Dimension(120, 40));
        crearbtn.setRequestFocusEnabled(false);
        crearbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crearbtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                crearbtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                crearbtnMouseExited(evt);
            }
        });

        crearlabel.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        crearlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        crearlabel.setText("Crear");

        javax.swing.GroupLayout crearbtnLayout = new javax.swing.GroupLayout(crearbtn);
        crearbtn.setLayout(crearbtnLayout);
        crearbtnLayout.setHorizontalGroup(
            crearbtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crearlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        crearbtnLayout.setVerticalGroup(
            crearbtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crearlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        add(crearbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 570, -1, -1));

        cancelarbtn.setPreferredSize(new java.awt.Dimension(120, 40));
        cancelarbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelarbtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelarbtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelarbtnMouseExited(evt);
            }
        });

        cancelarlabel.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        cancelarlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancelarlabel.setText("Cancelar");

        javax.swing.GroupLayout cancelarbtnLayout = new javax.swing.GroupLayout(cancelarbtn);
        cancelarbtn.setLayout(cancelarbtnLayout);
        cancelarbtnLayout.setHorizontalGroup(
            cancelarbtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancelarlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );
        cancelarbtnLayout.setVerticalGroup(
            cancelarbtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancelarlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        add(cancelarbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 570, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void celularTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_celularTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_celularTextActionPerformed

    private void nombreTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nombreTextMousePressed
        if (nombreText.getText().equals("Ingrese su nombre completo")) {
            nombreText.setText("");
            nombreText.setForeground(Color.black);
        }

        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_nombreTextMousePressed

    private void usuarioTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuarioTextMousePressed
        if (usuarioText.getText().equals("Ingrese el nombre con el que iniciará sesión")) {
            usuarioText.setText("");
            usuarioText.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_usuarioTextMousePressed

    private void mailTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mailTextMousePressed
        if (mailText.getText().equals("Ingrese su e-mail")) {
            mailText.setText("");
            mailText.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_mailTextMousePressed

    private void mail2TextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mail2TextMousePressed
        if (mail2Text.getText().equals("Repita su e-mail")) {
            mail2Text.setText("");
            mail2Text.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_mail2TextMousePressed

    private void celularTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_celularTextMousePressed
        if (celularText.getText().equals("Ingrese su número de celular")) {
            celularText.setText("");
            celularText.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }
    }//GEN-LAST:event_celularTextMousePressed

    private void passTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passTextMousePressed
        if (String.valueOf(passText.getPassword()).equals("********")) {
            passText.setText("");
            passText.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }

        if (String.valueOf(pass2Text.getPassword()).isEmpty()) {
            pass2Text.setText("********");
            pass2Text.setForeground(Color.gray);
        }
        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_passTextMousePressed

    private void pass2TextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pass2TextMousePressed
        if (String.valueOf(pass2Text.getPassword()).equals("********")) {
            pass2Text.setText("");
            pass2Text.setForeground(Color.black);
        }

        if (nombreText.getText().isEmpty()) {
            nombreText.setText("Ingrese su nombre completo");
            nombreText.setForeground(Color.gray);
        }
        if (mailText.getText().isEmpty()) {
            mailText.setText("Ingrese su e-mail");
            mailText.setForeground(Color.gray);
        }
        if (mail2Text.getText().isEmpty()) {
            mail2Text.setText("Repita su e-mail");
            mail2Text.setForeground(Color.gray);
        }

        if (String.valueOf(passText.getPassword()).isEmpty()) {
            passText.setText("********");
            passText.setForeground(Color.gray);
        }
        if (usuarioText.getText().isEmpty()) {
            usuarioText.setText("Ingrese el nombre con el que iniciará sesión");
            usuarioText.setForeground(Color.gray);
        }
        if (celularText.getText().isEmpty()) {
            celularText.setText("Ingrese su número de celular");
            celularText.setForeground(Color.gray);
        }
    }//GEN-LAST:event_pass2TextMousePressed

    private void cancelarbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarbtnMouseClicked
        Login nuevo = new Login();
        nuevo.setVisible(true);
        frame.cerrar();

    }//GEN-LAST:event_cancelarbtnMouseClicked

    private void crearbtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbtnMouseEntered
        crearbtn.setBackground(naranjaSuave);
    }//GEN-LAST:event_crearbtnMouseEntered

    private void crearbtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbtnMouseExited
        crearbtn.setBackground(naranja);
    }//GEN-LAST:event_crearbtnMouseExited

    private void cancelarbtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarbtnMouseEntered
        cancelarbtn.setBackground(naranjaSuave);
    }//GEN-LAST:event_cancelarbtnMouseEntered

    private void cancelarbtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarbtnMouseExited
        cancelarbtn.setBackground(naranja);
    }//GEN-LAST:event_cancelarbtnMouseExited

    private void crearbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbtnMouseClicked
      //  crearComensal();
      // nombreText.setText("");
       // usuarioText.setText("");
       // mailText.setText("");
     //   mail2Text.setText("");
      //  passText.setText("");
        //pass2Text.setText("");
      //  celularText.setText("");
/////////////////////
///      Ficheros Comensales = new Ficheros();
 ///       Comensales.crearComensal(new Comensal(nombreText.getText(), usuarioText.getText(),  passText.getText(), mailText.getText(), celularText.getText()));
 ///////////////////////
 
 Usuario user = new Usuario();
 user.nombreUsuario = usuarioText.getText();
        user.nombre = nombreText.getText();
        user.password = passText.getText();
        user.telefono = Integer.parseInt(celularText.getText());
        user.correo_alterno = mailText.getText();

        File imagenSeleccionadao = new File(pathphotolbl.getText());
        CrearImagen(imagenSeleccionadao, user);
        try{
            InsertarUsuario(user);
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }                                     
    }//GEN-LAST:event_crearbtnMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
 JFileChooser selector=new JFileChooser();
        selector.showOpenDialog(this);

        File archivo = selector.getSelectedFile();

        if (archivo != null) {
            String Origen = archivo.getPath();
            ImageIcon ingresar = new ImageIcon(Origen);
            Icon iconoIngresar = new ImageIcon(ingresar.getImage().getScaledInstance(fotoperfillbl.getWidth(), fotoperfillbl.getHeight(), Image.SCALE_FAST));
            fotoperfillbl.setIcon(iconoIngresar);
            pathphotolbl.setText(Origen);
            pathphotolbl.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(null, "Por favor seleccione una imagen");
        }    
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        Buscarfotobtn.setBackground(naranjaSuave);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        Buscarfotobtn.setBackground(naranja);

    }//GEN-LAST:event_jLabel1MouseExited

    
       public void CrearImagen(File imagenSeleccionada, Usuario user){
        
        VerificarDirectorioImagen();
        try{
            String extension =imagenSeleccionada.getName().substring(imagenSeleccionada.getName().lastIndexOf(".") +1);
            String DestinoRooot = "src\\main\\java\\recursos\\Cuentas\\Comensales\\Imagenes" +  user.nombreUsuario + "."+extension;
            Path destino = Paths.get(DestinoRooot);

            String origenImagen =  imagenSeleccionada.getPath();
            Path pathOrigen = Paths.get(origenImagen);

            Files.copy(pathOrigen, destino, REPLACE_EXISTING);
            
            user.path_fotografia = DestinoRooot.toString();
            JOptionPane.showMessageDialog(null, "La imagen fue copiada a Root");
        }
        catch(IOException ex){
            JOptionPane.showMessageDialog(null, "Error al copiar la imagen a Root");
        }
        
    }
    
    public void VerificarDirectorioImagen(){
        String root = "src\\main\\java\\recursos\\Cuentas\\Comensales\\Imagenes";
        File imagenes = new File(root);
        
        if (!imagenes.exists()) {
            imagenes.mkdir();
        }
        
    }
    
    
    
    public void InsertarUsuario(Usuario user) throws IOException{
        String rutaArchivoDataBase = "src\\main\\java\\recursos\\Cuentas\\Comensales\\database\\database_usuario.txt";
        String rutaDescriptorDataBase = "src\\main\\java\\recursos\\Cuentas\\Comensales\\database\\desc_database_usuario.txt";
        String rutaArchivoUsuario = "src\\main\\java\\recursos\\Cuentas\\Comensales\\database\\usuario.txt";
        String rutaDescriptorArchivoUsuario = "src\\main\\java\\recursos\\Cuentas\\Comensales\\database\\desc_usuario.txt";
        Login Login = new Login();
        
        File archivoDataBase = new File(rutaArchivoDataBase);
        File DescriptorDataBase = new File(rutaDescriptorDataBase);
        File archivoMaestro = new File(rutaArchivoUsuario);
        File archivoDescriptorMaestro = new File(rutaDescriptorArchivoUsuario);
        
        if (VerificarSiEsPrimerUsuario()) {
            EscribirEnBitacora(user, archivoDataBase, DescriptorDataBase);
            JOptionPane.showMessageDialog(null, "Usuario Creado");
            Login.setVisible(true);
            dispose();
        }else{

            if (!espacionEnDataBase(rutaDescriptorDataBase)) {
                EscribirEnArchivo(user, rutaArchivoDataBase, rutaDescriptorDataBase);
                JOptionPane.showMessageDialog(null, "Usuario Creado");
                Login.setVisible(true);
                dispose();
            }
             //Si no hay espacio en Bitacora, inserta en Archivo Maestro
            else {
            
                reOrganizar(archivoDataBase,DescriptorDataBase,archivoMaestro,archivoDescriptorMaestro, user);
                
                DescriptorDataBase.delete();
                archivoDataBase.delete();
                 if (!DescriptorDataBase.exists() && !archivoDataBase.exists()) {
                    File nuevoArchivoDataBase = new File(rutaArchivoDataBase);
                    nuevoArchivoDataBase.createNewFile();
                    File nuevoArchivoDesciptorBitacora = new File(rutaDescriptorDataBase);
                    nuevoArchivoDesciptorBitacora.createNewFile();
                   
                     EscribirEnBitacora(user, nuevoArchivoDataBase, nuevoArchivoDesciptorBitacora);
                     JOptionPane.showMessageDialog(null, "Usuario Creado");
                    Login.setVisible(true);
                    dispose();
                    
                }
               
            }
            
        }
    }
    
    public boolean espacionEnDataBase(String rutaDescriptorDataBase) throws IOException{
 
        String linea = "";
        FileReader readerArchivoDescriptor = new FileReader(rutaDescriptorDataBase);
        BufferedReader bfArchivoLectura = new BufferedReader(readerArchivoDescriptor);
        int lineaActual = 0;
        int numeroRegistros = 0;
        int maximoOrganizacion = 0;
        String[] cadenaLinea;
        while (( linea = bfArchivoLectura.readLine())!= null) {
 
            if (linea.contains("#_registros:")) {
                cadenaLinea = linea.split(":");
                numeroRegistros = Integer.parseInt(cadenaLinea[1]);
            }
           
            if (linea.contains("max_reorganizacion:")) {
                cadenaLinea = linea.split(":");
                maximoOrganizacion = Integer.parseInt(cadenaLinea[1]);
            }
            lineaActual++;
        }
        bfArchivoLectura.close();
        readerArchivoDescriptor.close();
        
        return maximoOrganizacion == numeroRegistros;
        
    }
    
    @SuppressWarnings("ConvertToTryWithResources")
    public void reOrganizar(File ArchivoBitacora, File DescriptorBitacora,File ArchivoMaestro, File DescriptorArchivoMaestro, Usuario user) throws IOException{
        
        FileReader readerDataBase = new FileReader(ArchivoBitacora);
        String[] lineas;
        HashMap<String,String> ColeccionMapaMaestro;
        int registros;
        try (BufferedReader bfArchivo = new BufferedReader(readerDataBase)) {
            @SuppressWarnings("UnusedAssignment")
            var lineaDataBase = "";
            ColeccionMapaMaestro = new HashMap<String, String>();
            try (FileWriter escribirEnMaestro = new FileWriter(ArchivoMaestro,true)) {
                BufferedWriter bw = new BufferedWriter(escribirEnMaestro);
                registros = 0;
                while ((lineaDataBase = bfArchivo.readLine()) != null) {
                    if (lineaDataBase.split("\\|")[9].equals("1")) {
                        bw.write(lineaDataBase+ System.getProperty("line.separator"));
                    }
                    
                    
                }   //Cerrar los buffers
                bw.close();
            }
        }
        readerDataBase.close();
        
        
        FileReader readerUsuario = new FileReader(ArchivoMaestro);
        BufferedReader bfUsuario = new BufferedReader(readerUsuario);
        
        String lineaUsuario = "";
        while ((lineaUsuario = bfUsuario.readLine()) != null) {
                
            lineas = lineaUsuario.split("\\|");
            ColeccionMapaMaestro.put(lineas[0], lineaUsuario);
            registros++;
                
        }
        readerUsuario.close();
        bfUsuario.close();
        
        
        
        
        FileWriter escribirEnDescriptorMaestro = new FileWriter(DescriptorArchivoMaestro,true);
        BufferedWriter bwDescriptor = new BufferedWriter(escribirEnDescriptorMaestro);
        if (DescriptorArchivoMaestro.length() == 0) {
            EscribirPrimeraVezEnDescriptor(bwDescriptor, user,registros);
        }
        else {
            EscribirEnDescriptor(DescriptorArchivoMaestro,user,registros);
        }
        escribirEnDescriptorMaestro.close();
        bwDescriptor.close();
        InsertarEnArchivoMaestro(ordenamientoBurbuja(ColeccionMapaMaestro),ArchivoMaestro);
        
    }
    public void EscribirPrimeraVezEnDescriptor(BufferedWriter bwDescriptor, Usuario user, int registros )throws IOException {
        SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/YYY HH:mm:ss");
        Date date = new Date(System.currentTimeMillis());
        bwDescriptor.write("nombre_simbolico:usuario" + System.getProperty( "line.separator" ));
        bwDescriptor.write("fecha_creacion:" + formatter.format(date) + System.getProperty( "line.separator" ));
        bwDescriptor.write("usuario_creacion:" + user.nombreUsuario + System.getProperty( "line.separator" ));
        bwDescriptor.write("fecha_modificacion:" + formatter.format(date) + System.getProperty( "line.separator" ));
        bwDescriptor.write("usuario_modificacion:" + user.nombreUsuario + System.getProperty( "line.separator" ));
        bwDescriptor.write("#_registros:" + String.valueOf(registros) + System.getProperty( "line.separator" ));
        bwDescriptor.write("registros_activos:"+ String.valueOf(registros)  + System.getProperty( "line.separator" ));
        bwDescriptor.write("registros_inactivos:0" + System.getProperty( "line.separator" ));
        bwDescriptor.close();
    }
    
    public void EscribirEnDescriptor(File DescriptorArchivoMaestro, Usuario user, int registros )throws IOException {
        SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/YYY HH:mm:ss");
        Date date = new Date(System.currentTimeMillis());
        
        FileReader readerArchivoDescriptor = new FileReader(DescriptorArchivoMaestro);
        BufferedReader bfReaderArchivoDesciptor = new BufferedReader(readerArchivoDescriptor);

        String path = DescriptorArchivoMaestro.getPath();
        int lineaActual = 0;

        String linea = "";
        String lineaModificada = "";
        System.out.println("--------------DESCRIPTOR MAESTRO---------------");
            List lista = new ArrayList();
            while (( linea = bfReaderArchivoDesciptor.readLine())!= null) {
                System.out.println(linea);
                lista.add(linea);

                if (linea.contains("fecha_modificacion:")) { 

                    lineaModificada = ("fecha_modificacion:" + formatter.format(date).toString());
                    lista.set(lineaActual, lineaModificada); 

                }
                if (linea.contains("usuario_modificacion:")) {
                    lineaModificada = ("usuario_modificacion:" + user.nombreUsuario);
                    lista.set(lineaActual, lineaModificada); 

                }

                if (linea.contains("#_registros:")) {
                    lineaModificada = ("#_registros:" + String.valueOf(registros));
                    lista.set(lineaActual, lineaModificada); 

                }
                if (linea.contains("registros_activos:")) {
                    lineaModificada = ("registros_activos:" + registros);
                    lista.set(lineaActual, lineaModificada); 

                }
                if (linea.contains("registros_inactivos:")) {
                    lineaModificada = ("registros_inactivos:" + (cantidadInactivos(linea)));
                    lista.set(lineaActual, lineaModificada); 


                }
    //                            
                lineaActual++;
            }


        bfReaderArchivoDesciptor.close();
        readerArchivoDescriptor.close();


        Iterator iter = lista.iterator();


//        DescriptorArchivoMaestro.delete();
//
//        if (!DescriptorArchivoMaestro.exists()) {
//
//            File nuevoArchivoDecriptor = new File(path);
//            nuevoArchivoDecriptor.createNewFile();
//
//
//              FileWriter escribirEnDescriptor = new FileWriter(nuevoArchivoDecriptor,true);
//              
//                while(iter.hasNext()) {
//                    escribirEnDescriptor.write((iter.next().toString() + System.getProperty("line.separator")));
//                }
//            }
        
    }
    public void InsertarEnArchivoMaestro(List contenidoDataBase, File archivoMaestro) throws IOException{

        String path = archivoMaestro.getPath();
        archivoMaestro.delete();
        
         if (!archivoMaestro.exists()) {
                       
            File nuevoArchivoMaestro = new File(path);
            nuevoArchivoMaestro.createNewFile();


              FileWriter escribirEnMaestroNuevo = new FileWriter(nuevoArchivoMaestro,true);

              System.out.println("CONTENIDO MAESTRO ORDENADO");
                  contenidoDataBase.forEach((x) -> {
                try {
                    escribirEnMaestroNuevo.write(x + System.getProperty("line.separator"));
                    System.out.println(x);
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
            });
        
       
            escribirEnMaestroNuevo.close();
        }
         else{
             System.out.println("Sigue existiendo ARchivo Maestro");
         }
        
        
    }
    public List ordenamientoBurbuja(HashMap lineas){
        List<String> list=new ArrayList<String>();
        list.addAll(lineas.keySet());
        list.forEach(x -> System.out.println("LLAVE:" + x));
        String temp;
        boolean sorted = false;
        while (!sorted) {
            sorted = true;
            for (int i = 0; i < list.size()-1; i++) {
                if (list.get(i).compareTo(list.get(i + 1)) > 0) {
                    temp = list.get(i);
                    list.set(i, list.get(i + 1));
                    list.set(i + 1, temp);
                    sorted = false;
                }
            }
            
        }
        list.forEach(x -> System.out.println("LLAVE ORDENADAS:" + x));
         List<String> listOrdenada=new ArrayList<String>();

            list.forEach(x -> {
                 System.out.println("X: " + x + "linea:"+lineas.get(x).toString());
                 listOrdenada.add(lineas.get(x).toString());
                 
            });
            
            System.out.println("Mapa ORDENADO");
            listOrdenada.forEach(x -> System.out.println(x));
        return listOrdenada;
    }
    
   
    
    public void EscribirEnArchivo(Usuario user, String rutaArchivo, String rutaDescriptor){
        File archivo = new File(rutaArchivo);
        File archivoDesciptor = new File(rutaDescriptor);
       
        List lista = new ArrayList();
        int lNumeroLineas = 0;
        
        try{
            FileReader readerArchivo = new FileReader(archivo);
            BufferedReader bfArchivo = new BufferedReader(readerArchivo);
            SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/YYY HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            System.out.println(formatter.format(date));
            try
            {
                    FileWriter escribirEnArchivo = new FileWriter(archivo,true);
                    BufferedWriter bw = new BufferedWriter(escribirEnArchivo);
                 
                    
                    bw.write(user.DelimitarCaracteres()+ System.getProperty( "line.separator" ));
                    System.out.println("Registro escrito");
                    bw.close();
                    escribirEnArchivo.close();
                    
                    while ((bfArchivo.readLine())!=null) {
                        lNumeroLineas++; 
                    }

                    bfArchivo.close();
                    readerArchivo.close();
                    System.out.println("Cantidad de lineas:" + lNumeroLineas);
                    System.out.println("----");
                    try {
                        
                        
                      
                        FileReader readerArchivoDescriptor = new FileReader(archivoDesciptor);
                        BufferedReader bfArchivoLectura = new BufferedReader(readerArchivoDescriptor);
                        
                       
                        int lineaActual = 0;
              
                        String linea = "";
                        String lineaModificada = "";
                        while (( linea = bfArchivoLectura.readLine())!= null) {
                            System.out.println(linea);
                            lista.add(linea);
                            
                            if (linea.contains("fecha_modificacion:")) { 
                               
                                lineaModificada = ("fecha_modificacion:" + formatter.format(date).toString());
                                lista.set(lineaActual, lineaModificada); 
                                                         
                            }
                            if (linea.contains("usuario_modificacion:")) {
                                lineaModificada = ("usuario_modificacion:" + user.nombreUsuario);
                                lista.set(lineaActual, lineaModificada); 
                                
                            }
                          
                            if (linea.contains("#_registros:")) {
                                lineaModificada = ("#_registros:" + String.valueOf(lNumeroLineas));
                                lista.set(lineaActual, lineaModificada); 
   
                            }
                            if (linea.contains("registros_activos:")) {
                                lineaModificada = ("registros_activos:" + (cantidadActivos(linea)+1));
                                lista.set(lineaActual, lineaModificada); 
                                
                            }
                            if (linea.contains("registros_inactivos:")) {
                                lineaModificada = ("registros_inactivos:" + (cantidadInactivos(linea)));
                                lista.set(lineaActual, lineaModificada); 
                                
                                
                            }
//                            
                            if (linea.contains("max_reorganizacion:")) {
                                lineaModificada = ("max_reorganizacion:" + (cantidadReOrganizacion(linea)));
                                lista.set(lineaActual, lineaModificada); 
                               
                              
                            }
                            lineaActual++;
                        }
                       
                        
                        bfArchivoLectura.close();
                        readerArchivoDescriptor.close();
                        
                        
                        Iterator iter = lista.iterator();
                     
                       
                        archivoDesciptor.delete();
                        
                        if (!archivoDesciptor.exists()) {
                       
                            File nuevoArchivoDecriptor = new File(rutaDescriptor);
                            nuevoArchivoDecriptor.createNewFile();


                              FileWriter escribirEnDescriptor = new FileWriter(nuevoArchivoDecriptor,true);

                            linea = "";


                            while(iter.hasNext()) {
                                escribirEnDescriptor.write((iter.next().toString() + System.getProperty("line.separator")));
                            }



                            escribirEnDescriptor.close();
                        }
                        
                    }
                    catch (IOException ex) {
                        System.out.println(ex.getMessage());
                    }
                    
            }
            catch(IOException ex)
            {
                System.out.println(ex.getMessage());
            } 
            
        }
        catch(Exception ex){
            System.out.println("Error");
        }
    }
    
    public void EscribirEnBitacora(Usuario user, File Bitacora, File Descriptor) throws IOException{

        int lNumeroLineas = 0;
        
        try{
            
            FileReader readerBitacora = new FileReader(Bitacora);
            BufferedReader bfArchivoBitacora = new BufferedReader(readerBitacora);
            SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/YYY HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            try
            {
                    FileWriter Escribir = new FileWriter(Bitacora,true);
                    BufferedWriter bw = new BufferedWriter(Escribir);
                    bw.write(user.DelimitarCaracteres()+ System.getProperty( "line.separator" ));
                    bw.close();
                    Escribir.close();
                    
                    System.out.println("Registro escrito en Bitacora");
                    while ((bfArchivoBitacora.readLine())!=null) {
                        
                        lNumeroLineas++;
                      }
                    try {
                        FileWriter EscribirEnDescriptor = new FileWriter(Descriptor,true);
                        PrintWriter  bwD = new PrintWriter (EscribirEnDescriptor);
                        bwD.write("nombre_simbolico:bitacora_usuario" + System.getProperty( "line.separator" ));
                        bwD.write("fecha_creacion:" + formatter.format(date) + System.getProperty( "line.separator" ));
                        bwD.write("usuario_creacion:" + user.nombreUsuario + System.getProperty( "line.separator" ));
                        bwD.write("fecha_modificacion:" + formatter.format(date) + System.getProperty( "line.separator" ));
                        bwD.write("usuario_modificacion:" + user.nombreUsuario + System.getProperty( "line.separator" ));
                        bwD.write("#_registros:" + String.valueOf(lNumeroLineas) + System.getProperty( "line.separator" ));
                        bwD.write("registros_activos:1" + System.getProperty( "line.separator" ));
                        bwD.write("registros_inactivos:0" + System.getProperty( "line.separator" ));
                        bwD.write("max_reorganizacion:3" + System.getProperty( "line.separator" ));
                        bwD.close();
                        EscribirEnDescriptor.close();
                    }
                    catch (IOException ex) {
                        System.out.println(ex.getMessage());
                    }
                    
                bfArchivoBitacora.close();
                readerBitacora.close();
            }
            catch(IOException ex)
            {
                System.out.println(ex.getMessage());
            } 
            
        }
        catch(Exception ex){
            System.out.println("Error");
        }
        
    }
    public int cantidadActivos(String linea){
        String[] lineaActual = linea.split(":");
        return  Integer.parseInt(lineaActual[1]);
    }
    
    public int cantidadInactivos(String linea){
        String[] lineaActual = linea.split(":");
        return  Integer.parseInt(lineaActual[1]);
    }
    
    public int cantidadReOrganizacion(String linea){
        String[] lineaActual = linea.split(":");
        return  Integer.parseInt(lineaActual[1]);
    }
    
    
    public boolean VerificarSiEsPrimerUsuario(){
        String rutaDescriptorBitacora = "C:\\MEIA\\desc_bitacora_usuario.txt";
        
        File archivoDescriptorBitacora = new File(rutaDescriptorBitacora);
        return archivoDescriptorBitacora.length() == 0;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(comP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
  
        java.awt.EventQueue.invokeLater(() -> {
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Buscarfotobtn;
    private javax.swing.JPanel cancelarbtn;
    private javax.swing.JLabel cancelarlabel;
    private javax.swing.JLabel celularL;
    private javax.swing.JTextField celularText;
    private javax.swing.JLabel contraseñaL;
    private javax.swing.JPanel crearbtn;
    private javax.swing.JLabel crearlabel;
    private javax.swing.JPanel datosP;
    private javax.swing.JPanel fondo;
    private javax.swing.JLabel fotoL;
    private javax.swing.JLabel fotoperfillbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel mail2L;
    private javax.swing.JTextField mail2Text;
    private javax.swing.JLabel mailL;
    private javax.swing.JTextField mailText;
    private javax.swing.JLabel nombreL;
    private javax.swing.JTextField nombreText;
    private javax.swing.JLabel pass2L;
    private javax.swing.JPasswordField pass2Text;
    private javax.swing.JPasswordField passText;
    private javax.swing.JLabel pathphotolbl;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel usuarioL;
    private javax.swing.JTextField usuarioText;
    // End of variables declaration//GEN-END:variables

    private void dispose() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    
}
